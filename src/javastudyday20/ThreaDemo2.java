package javastudyday20;

public class ThreaDemo2 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		/*
		 * 创建线程的是为了开辟一条执行路径，去运行指定的代码和其他代码实现同时运行。
		 * 而运行的指定代码
		 * jvm创建的主线程的任务都是定义在主函数中。
		 * 而自定义的线程它的任务在哪儿呢？
		 * Thread类用于描述线程，线程是需要任务的，所以Thread类也对任务的描述。
		 * 这个任务就通过Thread类中的run方法来体现，也就是说，run方法就是封装自定义线程运行任务的函数。
		 * run方法中定义就是线程要运行的任务代码。
		 * 开启线程是为了运行指定代码,所以只有继承Thread类，并复写run方法。
		 * 将运行的代码定义在run方法中即可。
		 * 1.
		 */
//		Thread t1 = new Thread();
		Demo2 d1 = new Demo2("旺财");
		Demo2 d2 = new Demo2("xiaoqiang");
		d1.start();
		for(int x=0;x<10;x++)
		{
		       System.out.println("haha...................."+Thread.currentThread().getName());
		}
		d2.start();
		System.out.println(4/0);

	}

}
/*
 * 如何创建一个线程呢？
 * 创建线程方式一：继承Thread类。
 * 步骤：
 * 1.定义一个类继承Thread类
 * 2.覆盖Thread类中的run方法。
 * 3.直接创建Thread的子类对象创建线程。
 * 4.调用start方法开启线程调用线程的任务run方法执行。
 * 
 * 实现Runnable接口的好处：
 * 1.将线程的任务从线程的子类中分离出来，进行单独封装。
 *   按照面向对象的思想将任务的封装成对象。
 * 2.避免单继承的局限性。
 * 所以创建线程的方式第二种较为实用。
 */
class Demo2 extends Thread
{
	private String name;
	Demo2(String name)
	{
		super(name);
		this.name = name;
	}
	public void run()
	{
		int[] arr = new int[3];
		System.out.println(arr[3]);
		for(int x = 0;x<10;x++)
		{
//			for(int y=-999999999;y<99999999;y++) {}
			System.out.println(name+"...x="+x+"...name="+Thread.currentThread().getName());
		}
	}
}
//调用run和调用start有什么区别？
