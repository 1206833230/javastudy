集合类的由来：
  对象用于封装特有的数据，对象多了需要存储。若果对象的个数不确定，就需要容器进行储存。
  
  集合的特点;
  1.用于储存对象的容器。
  2.集合的昌都市可变的。
  3.集合不可以储存基本数据类型。
  
 集合容器因为内部的数据结构不同，有多种结具体容器。
 不断地向上抽取，就形成集合框架。
 集合的顶层colection的常见方法：
 1.添加：
   boolean add(Object obj);
   boolean addAll(Collection coll)
 2.删除：
   boolean remove(object obj)
   boolean removeAll(collection coll)
   void clear();
 3.判断：
   Boolean contains(object obj)
   boolean containsAll(collection coll);
   boolean isEampy();判断集合中是否有元素。
 4.获取：
   int size（）；
   Iterator iterator();//取出元素的方法，迭代器。
       该对象必须依赖具体的容器，因为每个容器的数据结构不同。
       所以该迭代器对象实在容器中进行内部实现的。
       对于只用这而言具体的实现是不重要的，只要通过的容器获取到高实现的迭代器的对象即可。
   也就是iterator的方法。
   
   Iterator接口就是对所有collection容器进行元素取出的公共接口。
 5.其他
   booleanretainAll(Collection coll);去交集
   object to Array();将集合转换成数组。
   
   Collection：
   1--List：有序的（存入和取出的顺序是一致的），元素都有索引（角标），元素可以重复。
   1--set：元素不能重复。
   
   list特有常见的方法：有一个共同的特点就是都可以操作角标
   1.添加
   void add(index,element)
   void add(index,collection)
   
   2.删除
   object remove(index)
   
   3. 修改
   object set（index，element）
   
   4.获取
   Object get(index)
   int indexOf(Object)
   int lastIndexOf(object);
   list subList(start,end);
   
   list可以完成对元素的增删改查。
   1--vector 数组数据结构，是同步的。线程安全的。增删改查速度都非常慢。
   1--ArrayList 内部是数组数据结构，他是不同步的。效力低，替代了vevtor。查询速度非常快。牵一发而动全身。
   1--LinkList 链表数据结构，是不同步的。增删元素速度非常快。
   
   linkedList:
   addFirst();
   addLast();
   
   getFirst();//获取但不移除，如果链表为空，抛出NoSuchElementException
   getLast();//获取但不移除，如果量表为空，返回null.
   
   removeFirst();//获取但不移除，如果链表为空，抛出NoSuchElementException
   removeLast();
   jdk1.6
   pollFirst();//获取但不移除，如果量表为空，返回null.
   pollLast();
   
 ------------------------------------------
 set：元素不可以重复，是无序的  
 set接口中的方法和collection的方法一直。
 1--HashSet：内部数据结构是哈希表，是不同步的。
   
  哈希确定元素是否相同
  1.判断两个元素的哈希值是否相同。
         如果相同熊，判断两个对象的内容是否相同。
  2.判断哈希值相同，其实判断的地对象的hashCode是否相同。
        判断内容相同用得是equals方法。
   注意：
        如果哈希值不同，是不需要判断equals。 
   
   
  1--TreeSet:可以对Set集合中的元素进行排序。是不同步的。
               判断元素的唯一的方法，就是根据比较方法返回的值是否是0，是0就是相同元素，不存。
               
       TreeSet对元素进行排序的方式一：
               让元素自身具备比较功能，元素就需要实现compareable接口。覆盖compareTo方法。
      
              如果不要按照对象中具备的自然顺序进行排序。如果对象中不具备自然顺序。 怎么办？
              可以使用TreeSet集合第二种排序方式二：
              让集合自身具备比较功能。定义一个类实现Comparator接口，覆盖compare方法。
              将该类对象作为参数传递给TreeSet集合的构造函数。
-----------------------------------------------
Map: 一次添加一对元素，Collection：一次添加一个元素
    Map集合也叫双链集合，Collection也称为单链集合   
        其实map集合储存的就是键值对。
    map集合中必须保证键的唯一性。 
   
 常用的方法：
 1.添加
 value put（key，value）；返回前一个和key关联的值，如果没有返回空。
 2.删除
 void clear（）；清空map集合。
 value remove（key）；根据指定的key翻出得这个键值对。
 3.判断
 boolean（） containsKey(key);
 boolean() containsValue(value);
 boolean() isEmpty();
 
 4.获取  
 value get(key):通过获取值，如果没有该键返回null。
                通过获取返回值null，来判断是否包含指定键。
 int size（）；获取键值对的个数。
 
 Map常用的子类：
  1--HashTable：内部结构是哈希表，是同步的。不允许null作为键值，null作为值。
     1--Properties：用来储存键值对型的配置文件的信息。可以和Io技术相结合。
  2--HashMap：内部结构是哈希表，不是同步的。允许null作为键值，null作为值。
  3--TreeMap：内部结构是二叉树，不是同部分的。可以对map集合中的键进行排序。
  
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   